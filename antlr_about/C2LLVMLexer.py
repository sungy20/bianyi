# Generated from C2LLVM.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2/")
        buf.write("\u0128\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3")
        buf.write("\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\b\3\b")
        buf.write("\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3")
        buf.write("\17\3\17\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\37\3\37")
        buf.write("\3\37\3\37\3 \3 \3 \3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3")
        buf.write("$\3%\3%\3%\3&\3&\3&\3\'\3\'\3\'\3(\3(\7(\u00f7\n(\f(\16")
        buf.write("(\u00fa\13(\3)\5)\u00fd\n)\3)\6)\u0100\n)\r)\16)\u0101")
        buf.write("\3*\3*\3*\3+\3+\3+\3+\3,\3,\7,\u010d\n,\f,\16,\u0110\13")
        buf.write(",\3,\3,\3-\3-\3-\3-\7-\u0118\n-\f-\16-\u011b\13-\3-\3")
        buf.write("-\3-\3-\3-\3.\6.\u0123\n.\r.\16.\u0124\3.\3.\4\u010e\u0119")
        buf.write("\2/\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r")
        buf.write("\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30")
        buf.write("/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'")
        buf.write("M(O)Q*S+U,W-Y.[/\3\2\6\4\2C\\c|\6\2\62;C\\aac|\3\2\62")
        buf.write(";\5\2\13\f\17\17\"\"\2\u012d\2\3\3\2\2\2\2\5\3\2\2\2\2")
        buf.write("\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3")
        buf.write("\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2")
        buf.write("\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2")
        buf.write("\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2")
        buf.write("\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63")
        buf.write("\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2")
        buf.write("\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2")
        buf.write("\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3")
        buf.write("\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y")
        buf.write("\3\2\2\2\2[\3\2\2\2\3]\3\2\2\2\5f\3\2\2\2\7h\3\2\2\2\t")
        buf.write("j\3\2\2\2\13l\3\2\2\2\rs\3\2\2\2\17u\3\2\2\2\21w\3\2\2")
        buf.write("\2\23y\3\2\2\2\25{\3\2\2\2\27}\3\2\2\2\31\177\3\2\2\2")
        buf.write("\33\u0081\3\2\2\2\35\u0083\3\2\2\2\37\u0085\3\2\2\2!\u0087")
        buf.write("\3\2\2\2#\u008d\3\2\2\2%\u0094\3\2\2\2\'\u0099\3\2\2\2")
        buf.write(")\u00a2\3\2\2\2+\u00a8\3\2\2\2-\u00af\3\2\2\2/\u00b6\3")
        buf.write("\2\2\2\61\u00bd\3\2\2\2\63\u00c0\3\2\2\2\65\u00c6\3\2")
        buf.write("\2\2\67\u00cb\3\2\2\29\u00d3\3\2\2\2;\u00d6\3\2\2\2=\u00d9")
        buf.write("\3\2\2\2?\u00dd\3\2\2\2A\u00e2\3\2\2\2C\u00e4\3\2\2\2")
        buf.write("E\u00e6\3\2\2\2G\u00e8\3\2\2\2I\u00eb\3\2\2\2K\u00ee\3")
        buf.write("\2\2\2M\u00f1\3\2\2\2O\u00f4\3\2\2\2Q\u00fc\3\2\2\2S\u0103")
        buf.write("\3\2\2\2U\u0106\3\2\2\2W\u010a\3\2\2\2Y\u0113\3\2\2\2")
        buf.write("[\u0122\3\2\2\2]^\7%\2\2^_\7k\2\2_`\7p\2\2`a\7e\2\2ab")
        buf.write("\7n\2\2bc\7w\2\2cd\7f\2\2de\7g\2\2e\4\3\2\2\2fg\7>\2\2")
        buf.write("g\6\3\2\2\2hi\7\60\2\2i\b\3\2\2\2jk\7@\2\2k\n\3\2\2\2")
        buf.write("lm\7u\2\2mn\7v\2\2no\7t\2\2op\7w\2\2pq\7e\2\2qr\7v\2\2")
        buf.write("r\f\3\2\2\2st\7}\2\2t\16\3\2\2\2uv\7\177\2\2v\20\3\2\2")
        buf.write("\2wx\7=\2\2x\22\3\2\2\2yz\7*\2\2z\24\3\2\2\2{|\7+\2\2")
        buf.write("|\26\3\2\2\2}~\7.\2\2~\30\3\2\2\2\177\u0080\7,\2\2\u0080")
        buf.write("\32\3\2\2\2\u0081\u0082\7]\2\2\u0082\34\3\2\2\2\u0083")
        buf.write("\u0084\7_\2\2\u0084\36\3\2\2\2\u0085\u0086\7?\2\2\u0086")
        buf.write(" \3\2\2\2\u0087\u0088\7d\2\2\u0088\u0089\7t\2\2\u0089")
        buf.write("\u008a\7g\2\2\u008a\u008b\7c\2\2\u008b\u008c\7m\2\2\u008c")
        buf.write("\"\3\2\2\2\u008d\u008e\7t\2\2\u008e\u008f\7g\2\2\u008f")
        buf.write("\u0090\7v\2\2\u0090\u0091\7w\2\2\u0091\u0092\7t\2\2\u0092")
        buf.write("\u0093\7p\2\2\u0093$\3\2\2\2\u0094\u0095\7h\2\2\u0095")
        buf.write("\u0096\7t\2\2\u0096\u0097\7g\2\2\u0097\u0098\7g\2\2\u0098")
        buf.write("&\3\2\2\2\u0099\u009a\7e\2\2\u009a\u009b\7q\2\2\u009b")
        buf.write("\u009c\7p\2\2\u009c\u009d\7v\2\2\u009d\u009e\7k\2\2\u009e")
        buf.write("\u009f\7p\2\2\u009f\u00a0\7w\2\2\u00a0\u00a1\7g\2\2\u00a1")
        buf.write("(\3\2\2\2\u00a2\u00a3\7u\2\2\u00a3\u00a4\7e\2\2\u00a4")
        buf.write("\u00a5\7c\2\2\u00a5\u00a6\7p\2\2\u00a6\u00a7\7h\2\2\u00a7")
        buf.write("*\3\2\2\2\u00a8\u00a9\7r\2\2\u00a9\u00aa\7t\2\2\u00aa")
        buf.write("\u00ab\7k\2\2\u00ab\u00ac\7p\2\2\u00ac\u00ad\7v\2\2\u00ad")
        buf.write("\u00ae\7h\2\2\u00ae,\3\2\2\2\u00af\u00b0\7o\2\2\u00b0")
        buf.write("\u00b1\7c\2\2\u00b1\u00b2\7n\2\2\u00b2\u00b3\7n\2\2\u00b3")
        buf.write("\u00b4\7q\2\2\u00b4\u00b5\7e\2\2\u00b5.\3\2\2\2\u00b6")
        buf.write("\u00b7\7u\2\2\u00b7\u00b8\7k\2\2\u00b8\u00b9\7|\2\2\u00b9")
        buf.write("\u00ba\7g\2\2\u00ba\u00bb\7q\2\2\u00bb\u00bc\7h\2\2\u00bc")
        buf.write("\60\3\2\2\2\u00bd\u00be\7k\2\2\u00be\u00bf\7h\2\2\u00bf")
        buf.write("\62\3\2\2\2\u00c0\u00c1\7y\2\2\u00c1\u00c2\7j\2\2\u00c2")
        buf.write("\u00c3\7k\2\2\u00c3\u00c4\7n\2\2\u00c4\u00c5\7g\2\2\u00c5")
        buf.write("\64\3\2\2\2\u00c6\u00c7\7g\2\2\u00c7\u00c8\7n\2\2\u00c8")
        buf.write("\u00c9\7u\2\2\u00c9\u00ca\7g\2\2\u00ca\66\3\2\2\2\u00cb")
        buf.write("\u00cc\7g\2\2\u00cc\u00cd\7n\2\2\u00cd\u00ce\7u\2\2\u00ce")
        buf.write("\u00cf\7g\2\2\u00cf\u00d0\7\"\2\2\u00d0\u00d1\7k\2\2\u00d1")
        buf.write("\u00d2\7h\2\2\u00d28\3\2\2\2\u00d3\u00d4\7(\2\2\u00d4")
        buf.write("\u00d5\7(\2\2\u00d5:\3\2\2\2\u00d6\u00d7\7~\2\2\u00d7")
        buf.write("\u00d8\7~\2\2\u00d8<\3\2\2\2\u00d9\u00da\7k\2\2\u00da")
        buf.write("\u00db\7p\2\2\u00db\u00dc\7v\2\2\u00dc>\3\2\2\2\u00dd")
        buf.write("\u00de\7e\2\2\u00de\u00df\7j\2\2\u00df\u00e0\7c\2\2\u00e0")
        buf.write("\u00e1\7t\2\2\u00e1@\3\2\2\2\u00e2\u00e3\7-\2\2\u00e3")
        buf.write("B\3\2\2\2\u00e4\u00e5\7/\2\2\u00e5D\3\2\2\2\u00e6\u00e7")
        buf.write("\7\61\2\2\u00e7F\3\2\2\2\u00e8\u00e9\7?\2\2\u00e9\u00ea")
        buf.write("\7?\2\2\u00eaH\3\2\2\2\u00eb\u00ec\7#\2\2\u00ec\u00ed")
        buf.write("\7?\2\2\u00edJ\3\2\2\2\u00ee\u00ef\7@\2\2\u00ef\u00f0")
        buf.write("\7?\2\2\u00f0L\3\2\2\2\u00f1\u00f2\7>\2\2\u00f2\u00f3")
        buf.write("\7?\2\2\u00f3N\3\2\2\2\u00f4\u00f8\t\2\2\2\u00f5\u00f7")
        buf.write("\t\3\2\2\u00f6\u00f5\3\2\2\2\u00f7\u00fa\3\2\2\2\u00f8")
        buf.write("\u00f6\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9P\3\2\2\2\u00fa")
        buf.write("\u00f8\3\2\2\2\u00fb\u00fd\7/\2\2\u00fc\u00fb\3\2\2\2")
        buf.write("\u00fc\u00fd\3\2\2\2\u00fd\u00ff\3\2\2\2\u00fe\u0100\t")
        buf.write("\4\2\2\u00ff\u00fe\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u00ff")
        buf.write("\3\2\2\2\u0101\u0102\3\2\2\2\u0102R\3\2\2\2\u0103\u0104")
        buf.write("\7/\2\2\u0104\u0105\7@\2\2\u0105T\3\2\2\2\u0106\u0107")
        buf.write("\7)\2\2\u0107\u0108\13\2\2\2\u0108\u0109\7)\2\2\u0109")
        buf.write("V\3\2\2\2\u010a\u010e\7$\2\2\u010b\u010d\13\2\2\2\u010c")
        buf.write("\u010b\3\2\2\2\u010d\u0110\3\2\2\2\u010e\u010f\3\2\2\2")
        buf.write("\u010e\u010c\3\2\2\2\u010f\u0111\3\2\2\2\u0110\u010e\3")
        buf.write("\2\2\2\u0111\u0112\7$\2\2\u0112X\3\2\2\2\u0113\u0114\7")
        buf.write("\61\2\2\u0114\u0115\7,\2\2\u0115\u0119\3\2\2\2\u0116\u0118")
        buf.write("\13\2\2\2\u0117\u0116\3\2\2\2\u0118\u011b\3\2\2\2\u0119")
        buf.write("\u011a\3\2\2\2\u0119\u0117\3\2\2\2\u011a\u011c\3\2\2\2")
        buf.write("\u011b\u0119\3\2\2\2\u011c\u011d\7,\2\2\u011d\u011e\7")
        buf.write("\61\2\2\u011e\u011f\3\2\2\2\u011f\u0120\b-\2\2\u0120Z")
        buf.write("\3\2\2\2\u0121\u0123\t\5\2\2\u0122\u0121\3\2\2\2\u0123")
        buf.write("\u0124\3\2\2\2\u0124\u0122\3\2\2\2\u0124\u0125\3\2\2\2")
        buf.write("\u0125\u0126\3\2\2\2\u0126\u0127\b.\2\2\u0127\\\3\2\2")
        buf.write("\2\t\2\u00f8\u00fc\u0101\u010e\u0119\u0124\3\b\2\2")
        return buf.getvalue()


class C2LLVMLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    StrVar = 39
    INT = 40
    ARROW = 41
    CHAR = 42
    STRING = 43
    Comment = 44
    WS = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#include'", "'<'", "'.'", "'>'", "'struct'", "'{'", "'}'", 
            "';'", "'('", "')'", "','", "'*'", "'['", "']'", "'='", "'break'", 
            "'return'", "'free'", "'continue'", "'scanf'", "'printf'", "'malloc'", 
            "'sizeof'", "'if'", "'while'", "'else'", "'else if'", "'&&'", 
            "'||'", "'int'", "'char'", "'+'", "'-'", "'/'", "'=='", "'!='", 
            "'>='", "'<='", "'->'" ]

    symbolicNames = [ "<INVALID>",
            "StrVar", "INT", "ARROW", "CHAR", "STRING", "Comment", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "StrVar", "INT", "ARROW", "CHAR", "STRING", "Comment", 
                  "WS" ]

    grammarFileName = "C2LLVM.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


